@startuml diagramaDeClase

class Juego{

    +jugar(cantidadEjercitos:Integer, paises:Pais[])
    +pasarDeFase(): void
    -distribuirPaises():void
    -distribuirObjetivos():void
    +buscarPais(pais:String):Pais
    +canjearCartas(carta1:Carta,carta2:Carta,carta3:Carta):void
    +activarCarta(carta:Carta):void
}

abstract class Etapa{
    -continentes:ArrayList
    -cartas:ArrayList
    -jugadores:ArrayList

    +{static}asignarValores(continentes,cartas,jugadores):void
    +{static}siguienteJugador():Jugador
    +jugar(cantidadEjercitos:Integer,paises:Pais[])
    +{abstract}siguienteFase():Etapa
}

class Dado{
    +{static}lanzar():ArrayList
}

class Batalla{
    -atacado:Pais
    -atacante:Pais
    -cantidadEjercitos:Integer

    +batallar(resultadosDadosAtacado,resultadosDadosAtacante): void
    -determinarPerdedor(dadoAtacante, dadoAtacado): Pais
    -ataqueEntrePaises(resultadosDadosAtacado,resultadosDadosAtacante): void
}

class Pais{
    -nombre : String

    +atacarPais(pais:Pais,cantidadEjercitos:Integer,jugador:Jugador):void
    +serAtacado(unPais):void
    +lePerteneceA(jugador):void
    +serConquistadoPor(conquistador):void
    +conquistar(pais:Pais):void
    +moverEjercitos(cantidadEjercitos,destino): void
    +agregarEjercitos(cantidad):void
    +fueVencido():boolean;
}

abstract class Objetivo{

    #objetivoCumplido():boolean
    +{abstract}cumplido(jugadorDeTurno):boolean
}

class Jugador{
    -nombre : String
    -id: Integer

    +objetivoCumplido(jugadorDeTurno):void
}

interface Lector{
    +obtener():ArrayList
    +esDeTipo():boolean
}

class Continente{
    -nombre:String
    -recompensa:Integer

    +agregarPais(pais:Pais):void
    +getRecompensa():Integer
}

Juego "1"-->"2..6" Jugador
Jugador "1"-->"*" Pais
Jugador "1"-->"1" Objetivo
Batalla "1"<.."1" Pais
Juego "1".left.>"3" Lector
Juego "1"-->"6" Continente
Continente "1"-->"*"Pais
Juego "1"-->"*"Objetivo
Juego "1"-right->"1" Etapa
Batalla "1".down.>"1" Dado
@enduml